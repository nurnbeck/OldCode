#include "str.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>


// creates a copy of a string using new and returns a pointer to it,
char *clone_string_cpp(const char *s)
{
  char *cs = new char[strlen(s)+1]; // +1 one for string terminator
  strcpy(cs, s);
  return cs;
}

// frees strings created by clone_string_cpp
void free_string_cpp(const char *s)
{
  delete [] s;
}

// creates a copy of a string using malloc and returns a pointer to it,
char *clone_string_c(const char *s)
{
  char *cs = (char*)malloc(strlen(s)+1);
  strcpy(cs, s);
  return cs;
}

// frees strings created by clone_string_c 
void free_string_c(const char *s)
{
  free((char*)s); // without type cast compiler complains
                  // about wrong type (*s is const, but
                  // free expects regular pointer s
                  // (however, free doesn't change *s)
}


// helper function:
//
// read word after skipping white space characters starting at s and return
// number of characters in word; also advance s to character after word
static int read_word(const char * & s)
{
  // skip white space
  while (*s == ' ' || *s == '\t' || *s == '\n') {
    s++;
  }
  
  const char *t = s;
  int c = 
  // read until reaching end of string or white space
  while (*s != '\0' && *s != ' ' && *s != '\t' && *s != '\n') {
    if(line[i]=='a' || line[i]=='e' || line[i]=='i' || line[i]=='o' || line[i]=='u' || line[i]=='A' || line[i]=='E' || line[i]=='I' || line[i]=='O' || line[i]=='U')
      ++v;
    s++;
  }

  // number of characters in word
  return (int)(s-t);
}

// Tokenize string s into words that consist of
// characters != ' ', '\n', '\t' (white spaces)
// White space is skipped before reading any word.
// The number of tokens and the starting address of
// an array containing them are returned

// Examples:
//
// s                   tokens      (return value)
//
// "abc  def "         "abc" "def" (2)
// "  x \t  y \n z "   "x" "y" "z" (3)
// "  "                            (0)
int tokenize(const char *s, char ** & tokens)
{
  const char *t = s; // save for 2nd pass

  // Step 1: count number of tokens
  int count = 0;
  int tlen;
  
  do {
    tlen = read_word(t);
    if (tlen) {
      count++;
    }
  } while (tlen);

  
  // Step 2: allocate token array
  tokens = new char*[count];

  
  // Step 3: create tokens
  int index = 0;

  do {
    tlen = read_word(s);
    if (tlen) {

      // allocate memory for tokens[index]
      tokens[index] = new char[tlen+1];
      
      // copy tlen characters from s (which is a word) to tokens[index]
      strncpy(tokens[index], s-tlen, tlen);

      // terminate word
      tokens[index][tlen] = '\0';
      index++;
    }
    
  } while (tlen);

  // Step 4: return number of tokens
  return count;
}


// free token array created by tokenize, tnum = number of tokens
void free_tokens(char ** tokens, int tnum)
{
  // first free all tokens
  for (int i = 0;i < tnum;i++)
    delete [] tokens[i]
  }

  // then free token array
  delete [] tokens;
}
