#include "func.h"
#include <stdio.h>

#memory allocation, pointers, makefiles
int main()
{
  const int N = 10000000; // max. length

  // allocate large enough array
  // leave room for added '\n' at end  
  char *input = new char[N+1]; 

  // read all characters into array
  int num = 0;
  int num_lines = 0;
  
  for (;;) {
    int c = getchar();
    if (c == EOF) {
      break;
    }

    if (c == '\0') {
      printf("0 encountered\n");
      return 2;
    }

    if (num >= N) {
      printf("input too long\n");
      return 1;
    }

    // convert '\n' to '\0'
    if (c == '\n') {
      num_lines++;
      c = '\0';
    }
    
    input[num++] = c;
  }

  if (!feof(stdin)) {
    printf("read error\n");
    return 1;
  }

  // add '\0' if last line was not terminated by '\n'
  if (num == 0 || (num > 0 && input[num-1] != '\0')) {
    num_lines++;
    input[num++] = '\0';
  }

  assert(num_lines > 0);

  // create an array of pointers pointing
  // to each line
  char **lines = new char*[num_lines];
  int lineIndex = 0;

  int i = 0;
  do {
    // Assign the next line
    assert( lineIndex < num_lines );
    lines[ lineIndex ] = &input[ i ];
    lineIndex++;

    // find end of the string / start of the next one
    while ( input[i] != '\0' ) {
      i++;
    }
    // i is now the index of the null character: the end of the string.
    // Advance it once more, so that it points at the start of 
    // the next string.
    i++;
    // Keep looping while i is within the number of characters
    // of input that we read. 
  } while ( i < num );

  // printf("%d %d\n", num_lines, index);

  // Make sure that we assigned all of the lines that we read.
  assert( lineIndex == num_lines );

  // sort lines lexicographically
  sort(lines, num_lines);

  printf( "-----\n" );

  // print them
  for (int i=0; i < num_lines; i++) {
    printf("%s\n", lines[i]);
  }

  delete [] lines;
  delete [] input;
  return 0;
}
